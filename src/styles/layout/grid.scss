@mixin grid-column-width($i) {
  $n: #{$i - 1};
  $column-width: calc((100% - var(--gap) * #{$n}) / #{$i});
  grid-template-columns: repeat($i, $column-width);
}

.#{$grid-container} {
  display: grid;
  grid-template-columns: 100%;
  column-gap: var(--gap);
  width: calc(100% - 2rem);
  margin-left: 1rem;
  margin-right: 1rem;
  max-width: var(--max-width);

  @for $i from 0 through 8 {
    &.dgap-#{$i} {
      --gap: #{$l-unit * $i};
    }
  }

  &.row-gap {
    row-gap: var(--gap);
  }

  @include from($max-width) {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
  }
  &.full {
    width: 100%;
    max-width: 100%;
    margin-right: 0;
    margin-left: 0;
  }
  @each $size, $screen-size in $breakpoints {
    // Estilos por breakpoint
    @include from($size) {
      // Recorre la cantidad de columnas
      @for $i from 1 through $max-grid-columns {
        // Columnas en el contenedor

        // Una columna
        @if $i == 1 {
          &.cols-#{$size}-1,
          &.#{$size}-grid-1 {
            grid-template-columns: 100%;
          }
        }

        // MÃ¡s de una columna
        @if $i > 1 {
          &.cols-#{$size}-#{$i},
          &.#{$size}-grid-#{$i} {
            @include grid-column-width($i);
          }
        }
        // Columnas en los items
        > .span-#{$size}-#{$i},
        > .#{$size}-cols-#{$i} {
          grid-column-end: span $i;
        }

        // rows en los items
        > .#{$size}-rows-#{$i} {
          grid-row-end: span $i;
        }

        // Inicio de columna en items
        > .#{$size}-x-#{$i} {
          grid-column-start: $i;
        }

        // Inicio de fila en items
        > .#{$size}-y-#{$i} {
          grid-row-start: $i;
        }
      }
    }
  }
}